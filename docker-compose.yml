version: '3.8'

services:
  nginx:
    container_name: nginx_frontend
    build:
      context: Frontend/Nginx/
      dockerfile: Dockerfile
      args:
        SSL_CERTIFICATE: ${SSL_CERTIFICATE}
        SSL_CERTIFICATE_KEY: ${SSL_CERTIFICATE_KEY}
    env_file:
      - ./.env
    restart: unless-stopped
    ports:
      - 9090:9090
    volumes:
      - ./Frontend:/usr/share/nginx/html
    depends_on:
      - django
    networks:
      - backend

  django:
    build:
      context: ./Backend
    command: python manage.py runserver 0.0.0.0:8000
    # command: gunicorn pong_os.wsgi:application -w 4 -b 0.0.0.0:8000 # in production
    volumes:
      - ./Backend/srcs:/app/
    ports:
      - 8000:8000
    env_file:
      - ./.env
    restart: unless-stopped
    depends_on:
      - postgresdb
    networks:
      - backend

  postgresdb:
    container_name: postgresdb
    image: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env
    restart: unless-stopped
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=${SQL_USER}
      - POSTGRES_PASSWORD=${SQL_PASSWORD}
      - POSTGRES_DB=${SQL_DATABASE}
    networks:
      - backend
  # pgadmin:
  #   container_name: pgadmin
  #   image: dpage/pgadmin4
  #   volumes:
  #     - ./servers.json:/pgadmin4/servers.json
  #     - pgadmin_data:/var/lib/pgadmin/
  #   env_file:
  #     - ./.env
  #   environment:
  #     - PGADMIN_DEFAULT_EMAIL=user@example.com # user name 
  #     - PGADMIN_DEFAULT_PASSWORD=${SQL_PASSWORD} # pass django
  #   ports:
  #     - "8888:80"
  #   networks:
  #     - backend

networks:
  backend:
    driver: bridge

volumes:
  postgres_data: # pgadmin_data:
